/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      changeDictionaryDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
phiE
{
    boundaryField
    {
        "air_to_.*"
        {
            type            compressible::turbulentTemperatureRadCoupledMixed;
            value           $internalField;
            Tnbr            phiE;
            qr              rhoC;
            kappaMethod     lookup;
            kappa           epsR;
        }
    }
}

rhoC
{
    boundaryField
    {
        "air_to_.*"
        {
            type            codedFixedValue;
            value           $internalField;

            name            rhoCDistribution;
            code
            #{

                const vectorField& Cf = patch().Cf();
                scalarField& field = *this;

                const scalar sigma = 0.3;
                const scalar mu = 0;//5.625E-4;
                const scalar xgap = 0.0;
                const scalar xref = 0.025;//0.0105;
                const scalar L = xref + xgap;

                forAll(Cf, faceI)
                {
                    const scalar x = Cf[faceI][0];

                    // if (x >= xgap && x <= L);
                    if(x >= xgap)
                    {
                        field[faceI] = exp(-pow(((x-mu)/xref),2)/(2*pow(sigma,2)));
                        //Gx4 = np.exp( -((x-0.005)/0.005)**2 / (2 * 0.5**2) )
                    }
                    else
                    {
                        field[faceI] = 0;
                    }
                }
            #};
        }
        electrode_exposed
        {
            type            zeroGradient;
        }
    }
}
